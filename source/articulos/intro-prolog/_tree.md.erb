<style>

	.node circle, .res circle {
	  fill: #fff;
	  stroke: steelblue;
	  stroke-width: 3px;
	}

  .node.success circle {
    stroke: lightgreen;
  }

  .node.fail circle {
    stroke: red;
  }

  .node text { font: 1em 'Lato'; font-weight: 300; }
	.res text { font: 0.9em 'Lato'; font-weight: 300; }

  .node { cursor: pointer; }

	.link, .linkBranch, .linkRes {
	  fill: none;
	  stroke: #ccc;
	  stroke-width: 2px;
	}

</style>

<svg id="tree">
</svg>

<script>
var treeData = [
  {
    "name": "seComunican(maría, A)",
    "resolutionName": "¬ seComunican(maría, A)",
    "parent": "null",
    "children": [
      {
        "name": "telepatía(maría, A)",
        "resolutionName": "¬ telepatía(maría, A)",
        "rule": "seComunican(A₁, B₁) :- telepatía(A₁, B₁).",
        "resolutionRule": "seComunican(A₁, B₁), ¬ telepatía(A₁, B₁)",
        "unification": "A₁ ← maría, B₁ ← A",
        "children": [
          {
            "name": "⟂ con A = pedro",
            "kind": "success",
            "rule": "telepatía(maría, pedro).",
            "resolutionRule": "telepatía(maría, pedro)",
            "unification": "A ← pedro",
          }
        ]
      },
      {
        "name": "hablaCon(maría, A)",
        "resolutionName": "¬ hablaCon(maría, A)",
        "rule": "seComunican(A₂, B₂) :- hablaCon(A₂, B₂).",
        "resolutionRule": "seComunican(A₂, B₂), ¬ hablaCon(A₂, B₂)",
        "unification": "A₂ ← maría, B₂ ← A",
        "children": [
          {
            "name": "habla(maría, I₃), habla(A, I₃), maría \\= A",
            "resolutionName": "¬ habla(maría, I₃), ¬ habla(A, I₃), ¬ maría \\= A\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u200B",
            "rule": "hablaCon(A₃, B₃) :- habla(A₃, I₃), habla(B₃, I₃), A₃ \\= B₃.",
            "resolutionRule": "hablaCon(A₃, B₃), ¬ habla(A₃, I₃), ¬ habla(B₃, I₃), ¬ A₃ \\= B₃",
            "unification": "A₃ ← maría, B₃ ← A",
            "children": [
              {
                "name": "habla(A, inglés), maría \\= A",
                "resolutionName": "¬ habla(A, inglés), ¬ maría \\= A",
                "rule": "habla(maría, inglés).",
                "resolutionRule": "habla(maría, inglés)",
                "unification": "I₃ ← inglés",
                "children": [
                  {
                    "name": "maría \\= juan",
                    "resolutionName": "¬ maría \\= juan",
                    "rule": "habla(juan, inglés).",
                    "resolutionRule": "habla(juan, inglés)",
                    "unification": "A ← juan",
                    "children": [
                      {
                        "name": "⟂ con A = juan",
                        "kind": "success",
                        "rule": "\\=",
                        "unification": "verdadero"
                      }
                    ]
                  },
                  {
                    "name": "maría \\= maría",
                    "resolutionName": "¬ maría \\= maría",
                    "rule": "habla(maría, inglés).",
                    "resolutionRule": "habla(maría, inglés)",
                    "unification": "A ← maría",
                    "children": [
                      {
                        "name": "falla",
                        "kind": "fail",
                        "rule": "\\=",
                        "unification": "falso"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
];

// ************** Generate the tree diagram	 *****************
var margin = {top: 40, right: 80, bottom: 20, left: 80},
	width = 600 - margin.right - margin.left,
	height = 570 - margin.top - margin.bottom;

var resolutionSpineX = 390;
var resSeparation = 107;

var i = 0;

var tree = d3.layout.tree()
	.size([height, width]);

var showingAll = true;

var diagonal = d3.svg.diagonal()
	.projection(function(d) {
    return [d.x, d.y];
  });

var diagonalBranch = d3.svg.diagonal()
	.projection(function(d) {
    return [resolutionSpineX, d.y];
  });

var svg = d3.select("#tree")
	.attr("width", width + margin.right + margin.left)
	.attr("height", height + margin.top + margin.bottom)
  .append("g")
	.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

root = treeData[0];

update(root);

function update(source) {

  // Compute the new tree layout.
  var nodes = tree.nodes(root).reverse(),
	  links = tree.links(nodes);
  var link;

  var selectedLink;
  var resLink;
  var resNodes;

  // Normalize for fixed-depth.
  nodes.forEach(function(d) { d.y = d.depth * 100; });

  // Declare the nodes…
  var node = svg.selectAll("g.node")
	  .data(nodes, function(d) { return d.id || (d.id = ++i); });

  showingResolution = false;
  var nodeText = function(d) { return showingResolution ? d.resolutionName || d.name : d.name; };
  var nodeResText = function(d) { return showingResolution ? d.target.resolutionRule || d.target.rule : d.target.rule; };

  var showBranchOnly = function(d) {
    svg.selectAll(".node").classed("hide", true).classed("keep", false);

    var current = d;
    var branchLinks = [];
    while (current != null) {
      if (current.parent != null && current.parent.parent != null) {
        branchLinks.push({source: current.parent, target: current});
      }
      svg.selectAll(".node-" + current.id)
        .classed("keep", true)
        .classed("hide", false);
      current = current.parent;
    }

    // Declare the links…
    selectedLink = svg.selectAll("path.linkBranch")
  	  .data(branchLinks, function(d) { return d.target.id; });

    // Enter the links.
    selectedLink.enter().insert("path", "g")
  	  .attr("class", "linkBranch")
  	  .attr("d", diagonal);

    link.transition().duration(ANIMATION/2).style("opacity",0);

    svg.selectAll(".node.hide").transition().duration(ANIMATION/2)
      .style("opacity",0).each("end", function(){

        selectedLink.transition().duration(ANIMATION/2).attr("d", diagonalBranch);

        svg.selectAll(".node.keep").transition().duration(ANIMATION/2)
          .attr("transform", function(d) {
            return "translate(" + resolutionSpineX + "," + d.y + ")";
          }).each("end", function(){
            var resVSep = 25;

            svg.selectAll("path.linkRes")
              .data(branchLinks)
              .enter()
                .insert("path", "g")
                .attr("class", "linkRes")
                .attr("d", function(d){ return diagonal({
                  source: {x: resolutionSpineX - resSeparation, y: d.source.y + resVSep},
                  target: {x: resolutionSpineX, y: d.target.y}
                })})
                .style("opacity",0)
                .transition().duration(ANIMATION/2).style("opacity",1);

            resNodes = svg.selectAll("g.res").data(branchLinks);

            var resEnter = resNodes
              .enter().append("g")
          	  .attr("class", "res")
          	  .attr("transform", function(d) {
          		  return "translate(" + (resolutionSpineX-resSeparation) + "," + (d.source.y+resVSep) + ")"; })

            resEnter.style("opacity",0);

            resEnter.append("circle")
          	  .attr("r", 5)
          	  .style("fill", "#fff");

            resText = resEnter.append("text")
              .attr("x", -12)
          	  .attr("y", -22)
          	  .attr("dy", ".35em")
          	  .attr("text-anchor", "end");

            resText.append("tspan")
              .attr("class", "rule")
          	  .text(nodeResText)
          	  .style("fill-opacity", 1);

            resText.append("tspan")
              .attr('x', -12)
              .attr('dy', 22)
          	  .text(function(d) { return d.target.unification; })
          	  .style("fill-opacity", 1);

            resEnter.transition().duration(ANIMATION/2).style("opacity",1);

          });
      });

  };

  var showAll = function() {
    resNodes = null;

    resLink = svg.selectAll("path.linkRes, g.res");

    function showNodes() {
      svg.selectAll(".node.keep").transition().duration(ANIMATION/2)
        .attr("transform", function(d) {
          return "translate(" + d.x + "," + d.y + ")";
        }).each("end", function(){

          svg.selectAll(".node.hide").transition().duration(ANIMATION/2)
            .style("opacity",1);

          link.transition().duration(ANIMATION/2)
            .style("opacity",1).each("end", function(){
              selectedLink.remove();
            });

          svg.selectAll(".node").classed("hide", false).classed("keep", false);

        });
    }

    if (resLink.empty()) {
      showNodes();
    } else {
      resLink.transition().duration(ANIMATION/2)
        .style("opacity",0).each("end", function(){

          resLink.remove();

          selectedLink.transition().duration(ANIMATION/2).attr("d", diagonal);

          showNodes();
        });
    }
  };

  window.toggleResolution = function() {
    showingResolution = !showingResolution;
    node.select("text").text(nodeText);
    resNodes.select("text tspan.rule").text(nodeResText);
  }

  // Enter the nodes.
  var nodeEnter = node.enter().append("g")
	  .attr("class", function(d) { return "node node-" + d.id + " " + d.kind; })
	  .attr("transform", function(d) {
		  return "translate(" + d.x + "," + d.y + ")"; })
    .on("click", function(d) {
      showingAll = !showingAll;
      if (!showingAll)
        showBranchOnly(d);
      else
        showAll(d);
    });

  nodeEnter.append("circle")
	  .attr("r", 10)
	  .style("fill", "#fff");


  nodeEnter.append("text")
	  .attr("y", function(d) {
		  return d.children || d._children ? -22 : 22; })
	  .attr("dy", ".35em")
	  .attr("text-anchor", "middle")
	  .text(nodeText)
	  .style("fill-opacity", 1)

  // Declare the links…
  link = svg.selectAll("path.link")
	  .data(links, function(d) { return d.target.id; });

  // Enter the links.
  link.enter().insert("path", "g")
	  .attr("class", "link")
	  .attr("d", diagonal);
}
</script>
