
## Un primer programa

El programa más simple sería una enumeración explícita de **hechos**.

<pre>
habla(juan, ruso).
habla(juan, inglés).
habla(maría, inglés).
habla(pedro, ruso).
</pre>

Una consulta estará formada por al menos una cláusula. En este caso hay una **variable sin instanciar** `X` y una **constante** `ruso`.

<pre>
?- habla(X, ruso).
</pre>

Es fácil ver que las soluciones posibles son aquellas donde `X=juan` y luego `X=pedro`.

Para obtenerlas, se recorren una por una las definiciones que coincidan, o **unifiquen** con `habla(X, ruso)`. Internamente se puede pensar en un cursor que recorre los hechos a medida que se van pidiendo soluciones.

En un [primer paso](javascript:g2s1()) se inicializa la consulta y el cursor se ubicará en la definición del primer hecho, que, como coincide con `habla(X, ruso)`, se **unifica** `X=juan` obteniendo la primer solución.

Luego el usuario podrá pedir una [segunda solución](javascript:g2s2()). A continuación se buscarán las siguientes definiciones que puedan unicar con `habla(X, ruso)`. Esto se logra recién en la última definición. Dando lugar al [segundo resultado](javascript:g2s3()) unificando ahora `X=pedro`. Notar que cada solución tiene una instanción distinta en las variables.

Al pedir una [tercera solución](javascript:g2s4()) no se encontrarán más definiciones que unifiquen con el objetivo y se informará que no hay más soluciones.

<center id="g2" class="graph">
  <div style="float:left;">
    <code class="l1">habla(juan, ruso).</code><br/>
    <code class="l2">habla(juan, inglés).</code><br/>
    <code class="l3">habla(maría, inglés).</code><br/>
    <code class="l4">habla(pedro, ruso).</code><br/>
    <br/>
    <code class="l5">?- habla(X, ruso).<span class="n">↵</span></code><br/>
    <code class="l6">X = juan<span class="n">;↵</span></code><br/>
    <code class="l7">X = pedro<span class="n">;↵</span></code><br/>
    <code class="l8">fail</code><br/>
  </div>
  <%= embed_svg "program-single-goal.svg" %>
  <script>
    g2 = d3.select("#g2 svg");
    g2_goal = g2.selectAll("#shapePath1");
    g2_call = g2.selectAll("#shapePath10, #shapePath4, #shapePath18, #markerPath18");
    g2_result = toText(g2.select("#Shape20")).text("");
    g2_index = toText(g2.select("#Shape15")).text("?");
    g2_exit = g2.selectAll("#shapePath11, #shapePath2");
    g2_redo = g2.selectAll("#shapePath12, #shapePath3");
    g2_fail = g2.selectAll("#shapePath13, #shapePath5");
    g2_init_exit = g2.selectAll("#shapePath21, #shapePath23, #markerPath23");
    append(g2_init_exit, g2_exit);
    g2_redo_next = g2.selectAll("#shapePath19, #markerPath19");
    append(g2_redo_next, g2_redo);
    g2_next_exit = g2.selectAll("#shapePath22, #shapePath23, #markerPath23");
    append(g2_next_exit, g2_exit);
    g2_next_fail = g2.selectAll("#shapePath24, #shapePath26, #markerPath26");
    append(g2_next_fail, g2_fail);

    function append(target, source) {
      for(var i = 0; i < source[0].length; i++){
        target[0].push(source[0][i]);
      }
    }

    c2 = $("#g2");
    c2_consult_enter = $(".l5 .n", c2).hide();
    c2_result1 = $(".l6", c2).hide();
    c2_result1_enter = $(".l6 .n", c2).hide();
    c2_result2 = $(".l7", c2).hide();
    c2_result2_enter = $(".l7 .n", c2).hide();
    c2_fail = $(".l8", c2).hide();

    function setCursor(selector, context) {
      $("*", context).removeClass("cursor");
      $(selector, context).addClass("cursor");
    }

    function setG2CursorState(line) {
      g2_index.text(line);
      setCursor(".l" + line, c2);
    }

    function g2s1(callback) {
      highlight(g2_call, function(){
        setG2CursorState("1");
        highlight(g2_index, function(){
          highlight(g2_init_exit, function(){
            g2_result.text("X = juan");
            c2_result1.show();
            pause(callback);
          });
        });
      });
    }

    function g2s2(callback) {
      c2_result1_enter.show();
      pause(function(){
        g2_result.text("");
        highlight(g2_redo_next, function(){
          highlight(g2_index, function(){
            setG2CursorState("2");
            pause(function(){
              setG2CursorState("3");
              pause(function(){
                setG2CursorState("4");
                pause(callback)
              });
            });
          });
        });
      });
    }

    function g2s3(callback) {
      highlight(g2_next_exit, function(){
        g2_result.text("X = pedro");
        c2_result2.show();
        pause(callback);
      });
    }

    function g2s4() {
      c2_result2_enter.show();
      pause(function(){
        g2_result.text("");
        highlight(g2_redo_next, function(){
          highlight(g2_index, function(){
            g2_index.text("?");
            setCursor(".none", c2);

            pause(function(){
              highlight(g2_next_fail, function(){
                c2_fail.show();
              });
            });
          });
        });
      });
    }

    // $(function(){
    //   g2s1(function(){
    //     g2s2(function(){
    //       g2s3(g2s4);
    //     });
    //   });
    // });
  </script>
</center>

<p></p>
